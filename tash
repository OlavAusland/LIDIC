[1mdiff --git a/main.py b/main.py[m
[1mindex 543d371..1a3bbe6 100644[m
[1m--- a/main.py[m
[1m+++ b/main.py[m
[36m@@ -54,7 +54,7 @@[m [mdef train(cap: cv2.VideoCapture, tracker: HandTracker):[m
 [m
 [m
 def predict_gesture(cap: cv2.VideoCapture, tracker: HandTracker):[m
[31m-    model: Sequential = load_model('./models/4_model.h5')[m
[32m+[m[32m    model: Sequential = load_model('models/bounding_box/model.h5')[m
     classes = ['down', 'stop', 'left', 'right', 'up', 'down', 'pinch'][m
 [m
     while True:[m
[36m@@ -64,10 +64,11 @@[m [mdef predict_gesture(cap: cv2.VideoCapture, tracker: HandTracker):[m
 [m
         tracker.hands_finder(frame)[m
         lms = tracker.position_finder(frame, normalized=True)[m
[31m-[m
         if lms:[m
             landmark = np.array(lms).reshape((42,))[m
 [m
[32m+[m
[32m+[m
             predictions = model.predict(np.array([landmark]))[m
             predicted = np.argmax(np.squeeze(predictions))[m
             if np.squeeze(predictions)[predicted] > 0:[m
[36m@@ -148,9 +149,37 @@[m [mdef projection(cap: cv2.VideoCapture, tracker: HandTracker):[m
 def main():[m
     cap = cv2.VideoCapture(0)[m
     tracker = HandTracker()[m
[31m-    # train(cap, tracker)[m
[32m+[m[32m    train(cap, tracker)[m
     predict_gesture(cap, tracker)[m
     # projection(cap, tracker)[m
[32m+[m
[32m+[m[32m    """[m
[32m+[m[32m    database = list()[m
[32m+[m[32m    with open('data/data.csv') as file:[m
[32m+[m[32m        csv_file = csv.reader(file)[m
[32m+[m
[32m+[m[32m        for row in csv_file:[m
[32m+[m[32m            low_x, low_y, high_x, high_y = np.inf, np.inf, 0, 0[m
[32m+[m[32m            temp = list()[m
[32m+[m[32m            for i in range(1, len(row), 2):[m
[32m+[m[32m                if low_x > float(row[i]):[m
[32m+[m[32m                    low_x = float(row[i])[m
[32m+[m[32m                if low_y > float(row[i+1]):[m
[32m+[m[32m                    low_y = float(row[i+1])[m
[32m+[m[32m                if high_x < float(row[i]):[m
[32m+[m[32m                    high_x = float(row[i])[m
[32m+[m[32m                if high_y < float(row[i+1]):[m
[32m+[m[32m                    high_y = float(row[i+1])[m
[32m+[m[32m            temp.extend([low_x, low_y, high_x, high_y])[m
[32m+[m[32m            for i in range(1, len(row), 1):[m
[32m+[m[32m                temp.append(row[i])[m
[32m+[m[32m            database.append(temp)[m
[32m+[m
[32m+[m[32m    with open('data/data_bb.csv', 'w', newline='') as file:[m
[32m+[m[32m        writer = csv.writer(file)[m
[32m+[m[32m        writer.writerows(database)[m
[32m+[m[32m    """[m
[32m+[m
     """[m
     database = list()[m
     with open('data/data.csv') as file:[m
[1mdiff --git a/train_gestures.py b/train_gestures.py[m
[1mindex 628dd82..95ae57a 100644[m
[1m--- a/train_gestures.py[m
[1m+++ b/train_gestures.py[m
[36m@@ -2,12 +2,13 @@[m [mimport os[m
 import cv2 as cv[m
 import numpy as np[m
 from sklearn.model_selection import train_test_split[m
[32m+[m[32mfrom tensorflow.keras.applications import VGG16[m
 from tensorflow import keras[m
 from tensorflow.keras import layers[m
 import csv[m
 [m
[31m-INPUT_SHAPE = (21,)[m
[31m-OUTPUT_SHAPE = 7[m
[32m+[m[32mINPUT_SHAPE = (42,)[m
[32m+[m[32mOUTPUT_SHAPE = 4[m
 [m
 EPOCH_SIZE = 15[m
 BATCH_SIZE = 5[m
[36m@@ -23,46 +24,27 @@[m [mdef create_model() -> keras.Sequential:[m
         [[m
             layers.Input(shape=INPUT_SHAPE),[m
             layers.Dropout(0.2),[m
[31m-            layers.Dense(20, activation='relu'),[m
[31m-            layers.Dropout(0.4),[m
[31m-            layers.Dense(20, activation='relu'),[m
[32m+[m[32m            layers.Dense(128, activation='relu'),[m
             layers.Dropout(0.4),[m
[31m-            layers.Dense(10, activation='relu'),[m
[31m-            layers.Dense(OUTPUT_SHAPE, activation='softmax')[m
[31m-        ][m
[31m-    )[m
[31m-[m
[31m-    model.summary()[m
[31m-    model.compile('adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])[m
[31m-    return model[m
[31m-[m
[31m-[m
[31m-def create_advanced_model() -> keras.Sequential:[m
[31m-    model = keras.Sequential([m
[31m-        [[m
[31m-            layers.Input(shape=INPUT_SHAPE),[m
[31m-            layers.Dropout(0.5),[m
             layers.Dense(256, activation='relu'),[m
[31m-            layers.Dropout(0.5),[m
[31m-            layers.Dense(512, activation='relu'),[m
[31m-            layers.Dropout(0.5),[m
[31m-            layers.Dense(256, activation='relu'),[m
[31m-            layers.Dropout(0.5),[m
[32m+[m[32m            layers.Dropout(0.4),[m
             layers.Dense(128, activation='relu'),[m
[31m-            layers.Dropout(0.5),[m
[32m+[m[32m            layers.Dropout(0.4),[m
             layers.Dense(64, activation='relu'),[m
[31m-            layers.Dense(OUTPUT_SHAPE, activation='softmax')[m
[32m+[m[32m            layers.Dropout(0.4),[m
[32m+[m[32m            layers.Dense(32, activation='relu'),[m
[32m+[m[32m            layers.Dense(OUTPUT_SHAPE, activation='sigmoid')[m
         ][m
     )[m
[31m-    model.summary()[m
[31m-    model.compile('adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])[m
 [m
[32m+[m[32m    model.summary()[m
[32m+[m[32m    model.compile('adam', loss='mse', metrics=['accuracy'])[m
     return model[m
 [m
 [m
 def load_data(dataset: str, columns: tuple):[m
     x_dataset = np.loadtxt(dataset, delimiter=',', dtype='float32', usecols=list(range(columns[0], columns[1])))[m
[31m-    y_dataset = np.loadtxt(dataset, delimiter=',', dtype='int32', usecols=(0))[m
[32m+[m[32m    y_dataset = np.loadtxt(dataset, delimiter=',', dtype='int32', usecols=([0, 1, 2, 3]))[m
     x_train, x_test, y_train, y_test = train_test_split(x_dataset, y_dataset, train_size=0.75, random_state=42)[m
 [m
     return x_train, x_test, y_train, y_test[m
[36m@@ -70,10 +52,11 @@[m [mdef load_data(dataset: str, columns: tuple):[m
 [m
 def main():[m
     # x_train, x_test, y_train, y_test = load_data('data/data.csv', (1, 43))[m
[31m-    x_train, x_test, y_train, y_test = load_data('data/data_dist.csv', (1, INPUT_SHAPE[0]+1))[m
[32m+[m[32m    x_train, x_test, y_train, y_test = load_data('data/data_bb.csv', (4, 46))[m
[32m+[m[32m    # x_train, x_test, y_train, y_test = load_data('data/data_dist.csv', (1, INPUT_SHAPE[0]+1))[m
     model = create_model()[m
     model.fit(x_train, y_train, epochs=1000, batch_size=64, validation_data=(x_test, y_test))[m
[31m-    model.save('models/7_model.h5')[m
[32m+[m[32m    model.save('models/bounding_box/model.h5')[m
 [m
 [m
 if __name__ == '__main__':[m
